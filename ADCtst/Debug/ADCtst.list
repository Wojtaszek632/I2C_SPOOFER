
ADCtst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004484  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004654  08004654  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800465c  0800465c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08004670  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004670  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec51  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c90  00000000  00000000  0002ec8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00031598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e7d  00000000  00000000  00032168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de1e  00000000  00000000  00058fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b5c  00000000  00000000  00066e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f95f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000345c  00000000  00000000  0015f9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080045f4 	.word	0x080045f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080045f4 	.word	0x080045f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
int main(void)
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fb28 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f846 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f93e 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f90c 	bl	8000700 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e8:	f000 f892 	bl	8000610 <MX_ADC1_Init>

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);

    return 1;
  }
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80004ec:	217f      	movs	r1, #127	; 0x7f
 80004ee:	481d      	ldr	r0, [pc, #116]	; (8000564 <main+0x98>)
 80004f0:	f001 fcc6 	bl	8001e80 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80004f4:	481b      	ldr	r0, [pc, #108]	; (8000564 <main+0x98>)
 80004f6:	f000 fed3 	bl	80012a0 <HAL_ADC_Start>
  int counter = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
	  none,
	  high,
	  low
  }typedef level_t;

  level_t newlevel = none;
 80004fe:	2300      	movs	r3, #0
 8000500:	72fb      	strb	r3, [r7, #11]
  level_t lastlevel = none;
 8000502:	2300      	movs	r3, #0
 8000504:	72bb      	strb	r3, [r7, #10]
  while (1)
  {



  uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000506:	4817      	ldr	r0, [pc, #92]	; (8000564 <main+0x98>)
 8000508:	f000 ff84 	bl	8001414 <HAL_ADC_GetValue>
 800050c:	6078      	str	r0, [r7, #4]

  if (value < 15)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b0e      	cmp	r3, #14
 8000512:	d804      	bhi.n	800051e <main+0x52>
  {
	 // HAL_GPIO_WritePin(PC4_GPIO_Port, PC4_Pin, GPIO_PIN_RESET);
	  lastlevel = newlevel;
 8000514:	7afb      	ldrb	r3, [r7, #11]
 8000516:	72bb      	strb	r3, [r7, #10]
	  newlevel = low;
 8000518:	2302      	movs	r3, #2
 800051a:	72fb      	strb	r3, [r7, #11]
 800051c:	e006      	b.n	800052c <main+0x60>
  }
  else if (value > 32)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b20      	cmp	r3, #32
 8000522:	d903      	bls.n	800052c <main+0x60>
   {
	 // HAL_GPIO_WritePin(PC4_GPIO_Port, PC4_Pin, GPIO_PIN_SET);
	  lastlevel = newlevel;
 8000524:	7afb      	ldrb	r3, [r7, #11]
 8000526:	72bb      	strb	r3, [r7, #10]
	  newlevel = high;
 8000528:	2301      	movs	r3, #1
 800052a:	72fb      	strb	r3, [r7, #11]
   }
  if(lastlevel == high && newlevel == low)
 800052c:	7abb      	ldrb	r3, [r7, #10]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d10b      	bne.n	800054a <main+0x7e>
 8000532:	7afb      	ldrb	r3, [r7, #11]
 8000534:	2b02      	cmp	r3, #2
 8000536:	d108      	bne.n	800054a <main+0x7e>
  {
	  counter++;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_WritePin(SDA_GPIO_Port,SDA_Pin,GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <main+0x9c>)
 8000546:	f002 f83b 	bl	80025c0 <HAL_GPIO_WritePin>
  }

  if (counter >= 11)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	2b0a      	cmp	r3, #10
 800054e:	ddda      	ble.n	8000506 <main+0x3a>
  {
	  HAL_GPIO_WritePin(SDA_GPIO_Port,SDA_Pin,GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <main+0x9c>)
 8000558:	f002 f832 	bl	80025c0 <HAL_GPIO_WritePin>
	  counter = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  {
 8000560:	e7d1      	b.n	8000506 <main+0x3a>
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	48000400 	.word	0x48000400

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	; 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f004 f832 	bl	80045e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000592:	f002 f83b 	bl	800260c <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 f970 	bl	8000880 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2310      	movs	r3, #16
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ba:	230a      	movs	r3, #10
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f872 	bl	80026b8 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005da:	f000 f951 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fc3a 	bl	8002e70 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000602:	f000 f93d 	bl	8000880 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3758      	adds	r7, #88	; 0x58
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000634:	4a30      	ldr	r2, [pc, #192]	; (80006f8 <MX_ADC1_Init+0xe8>)
 8000636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000638:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <MX_ADC1_Init+0xe4>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 800063e:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000640:	2218      	movs	r2, #24
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <MX_ADC1_Init+0xe4>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000652:	2204      	movs	r2, #4
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <MX_ADC1_Init+0xe4>)
 800065e:	2201      	movs	r2, #1
 8000660:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000662:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000664:	2201      	movs	r2, #1
 8000666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <MX_ADC1_Init+0xe4>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_ADC1_Init+0xe4>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_ADC1_Init+0xe4>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	4817      	ldr	r0, [pc, #92]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000696:	f000 fcad 	bl	8000ff4 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006a0:	f000 f8ee 	bl	8000880 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4619      	mov	r1, r3
 80006ae:	4811      	ldr	r0, [pc, #68]	; (80006f4 <MX_ADC1_Init+0xe4>)
 80006b0:	f001 fc46 	bl	8001f40 <HAL_ADCEx_MultiModeConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80006ba:	f000 f8e1 	bl	8000880 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_ADC1_Init+0xec>)
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c2:	2306      	movs	r3, #6
 80006c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ca:	237f      	movs	r3, #127	; 0x7f
 80006cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ce:	2304      	movs	r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <MX_ADC1_Init+0xe4>)
 80006dc:	f000 fea8 	bl	8001430 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80006e6:	f000 f8cb 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	; 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000028 	.word	0x20000028
 80006f8:	50040000 	.word	0x50040000
 80006fc:	08600004 	.word	0x08600004

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART2_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000744:	f003 fa74 	bl	8003c30 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f897 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000008c 	.word	0x2000008c
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <MX_GPIO_Init+0x114>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a3e      	ldr	r2, [pc, #248]	; (8000874 <MX_GPIO_Init+0x114>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <MX_GPIO_Init+0x114>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b39      	ldr	r3, [pc, #228]	; (8000874 <MX_GPIO_Init+0x114>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a38      	ldr	r2, [pc, #224]	; (8000874 <MX_GPIO_Init+0x114>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b36      	ldr	r3, [pc, #216]	; (8000874 <MX_GPIO_Init+0x114>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <MX_GPIO_Init+0x114>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a32      	ldr	r2, [pc, #200]	; (8000874 <MX_GPIO_Init+0x114>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <MX_GPIO_Init+0x114>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_GPIO_Init+0x114>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <MX_GPIO_Init+0x114>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_GPIO_Init+0x114>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2120      	movs	r1, #32
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f001 feef 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC4_GPIO_Port, PC4_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2110      	movs	r1, #16
 80007e6:	4824      	ldr	r0, [pc, #144]	; (8000878 <MX_GPIO_Init+0x118>)
 80007e8:	f001 feea 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f2:	4822      	ldr	r0, [pc, #136]	; (800087c <MX_GPIO_Init+0x11c>)
 80007f4:	f001 fee4 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	481a      	ldr	r0, [pc, #104]	; (8000878 <MX_GPIO_Init+0x118>)
 8000810:	f001 fd2c 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000814:	2320      	movs	r3, #32
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f001 fd1d 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4_Pin */
  GPIO_InitStruct.Pin = PC4_Pin;
 8000832:	2310      	movs	r3, #16
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PC4_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0x118>)
 800084a:	f001 fd0f 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDA_Pin */
  GPIO_InitStruct.Pin = SDA_Pin;
 800084e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x11c>)
 8000868:	f001 fd00 	bl	800226c <HAL_GPIO_Init>

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	48000800 	.word	0x48000800
 800087c:	48000400 	.word	0x48000400

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6613      	str	r3, [r2, #96]	; 0x60
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6593      	str	r3, [r2, #88]	; 0x58
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b0ac      	sub	sp, #176	; 0xb0
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2288      	movs	r2, #136	; 0x88
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 fe75 	bl	80045e4 <memset>
  if(hadc->Instance==ADC1)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a27      	ldr	r2, [pc, #156]	; (800099c <HAL_ADC_MspInit+0xc8>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d146      	bne.n	8000992 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000908:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800090a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800090e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 800091a:	230a      	movs	r3, #10
 800091c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800091e:	2307      	movs	r3, #7
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000922:	2302      	movs	r3, #2
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000926:	2302      	movs	r3, #2
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800092a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4618      	mov	r0, r3
 8000936:	f002 fcbf 	bl	80032b8 <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000940:	f7ff ff9e 	bl	8000880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_ADC_MspInit+0xcc>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <HAL_ADC_MspInit+0xcc>)
 800094a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800094e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_ADC_MspInit+0xcc>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_ADC_MspInit+0xcc>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_ADC_MspInit+0xcc>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_ADC_MspInit+0xcc>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000974:	2302      	movs	r3, #2
 8000976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800097a:	230b      	movs	r3, #11
 800097c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_ADC_MspInit+0xd0>)
 800098e:	f001 fc6d 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	37b0      	adds	r7, #176	; 0xb0
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	50040000 	.word	0x50040000
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000800 	.word	0x48000800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0ac      	sub	sp, #176	; 0xb0
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2288      	movs	r2, #136	; 0x88
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 fe0b 	bl	80045e4 <memset>
  if(huart->Instance==USART2)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <HAL_UART_MspInit+0xb0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d13b      	bne.n	8000a50 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009d8:	2302      	movs	r3, #2
 80009da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009dc:	2300      	movs	r3, #0
 80009de:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fc67 	bl	80032b8 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f0:	f7ff ff46 	bl	8000880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f8:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 80009fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fe:	6593      	str	r3, [r2, #88]	; 0x58
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 8000a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a24:	230c      	movs	r3, #12
 8000a26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f001 fc0e 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	37b0      	adds	r7, #176	; 0xb0
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40021000 	.word	0x40021000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 f89a 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000adc:	f7ff ffea 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f003 fd49 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0a:	f7ff fcdf 	bl	80004cc <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b1c:	08004664 	.word	0x08004664
  ldr r2, =_sbss
 8000b20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b24:	20000114 	.word	0x20000114

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_Init+0x3c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <HAL_Init+0x3c>)
 8000b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b42:	2003      	movs	r0, #3
 8000b44:	f001 fb5e 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 f80f 	bl	8000b6c <HAL_InitTick>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	e001      	b.n	8000b5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5a:	f7ff fe97 	bl	800088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d023      	beq.n	8000bc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_InitTick+0x70>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fb5b 	bl	8002252 <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10f      	bne.n	8000bc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d809      	bhi.n	8000bbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f001 fb33 	bl	800221a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_InitTick+0x74>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e007      	b.n	8000bcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e004      	b.n	8000bcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e001      	b.n	8000bcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000110 	.word	0x20000110

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000110 	.word	0x20000110

08000c24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	609a      	str	r2, [r3, #8]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3360      	adds	r3, #96	; 0x60
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <LL_ADC_SetOffset+0x44>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cc4:	bf00      	nop
 8000cc6:	371c      	adds	r7, #28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	03fff000 	.word	0x03fff000

08000cd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3360      	adds	r3, #96	; 0x60
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3360      	adds	r3, #96	; 0x60
 8000d10:	461a      	mov	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	431a      	orrs	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d2a:	bf00      	nop
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b087      	sub	sp, #28
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3330      	adds	r3, #48	; 0x30
 8000d46:	461a      	mov	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	f003 030c 	and.w	r3, r3, #12
 8000d52:	4413      	add	r3, r2
 8000d54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	f003 031f 	and.w	r3, r3, #31
 8000d60:	211f      	movs	r1, #31
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0e9b      	lsrs	r3, r3, #26
 8000d6e:	f003 011f 	and.w	r1, r3, #31
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	f003 031f 	and.w	r3, r3, #31
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b087      	sub	sp, #28
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3314      	adds	r3, #20
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	0e5b      	lsrs	r3, r3, #25
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	4413      	add	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	0d1b      	lsrs	r3, r3, #20
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	2107      	movs	r1, #7
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	0d1b      	lsrs	r3, r3, #20
 8000dc8:	f003 031f 	and.w	r3, r3, #31
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000dd8:	bf00      	nop
 8000dda:	371c      	adds	r7, #28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	401a      	ands	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0318 	and.w	r3, r3, #24
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e08:	40d9      	lsrs	r1, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	400b      	ands	r3, r1
 8000e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e12:	431a      	orrs	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	0007ffff 	.word	0x0007ffff

08000e2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 031f 	and.w	r3, r3, #31
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6093      	str	r3, [r2, #8]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e80:	d101      	bne.n	8000e86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ea4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ea8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ed0:	d101      	bne.n	8000ed6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ef8:	f043 0201 	orr.w	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f20:	f043 0202 	orr.w	r2, r3, #2
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d101      	bne.n	8000f4c <LL_ADC_IsEnabled+0x18>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <LL_ADC_IsEnabled+0x1a>
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d101      	bne.n	8000f72 <LL_ADC_IsDisableOngoing+0x18>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <LL_ADC_IsDisableOngoing+0x1a>
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f94:	f043 0204 	orr.w	r2, r3, #4
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d101      	bne.n	8000fc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d101      	bne.n	8000fe6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e136      	b.n	800127c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001018:	2b00      	cmp	r3, #0
 800101a:	d109      	bne.n	8001030 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fc59 	bl	80008d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff19 	bl	8000e6c <LL_ADC_IsDeepPowerDownEnabled>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff feff 	bl	8000e48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff34 	bl	8000ebc <LL_ADC_IsInternalRegulatorEnabled>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d115      	bne.n	8001086 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff18 	bl	8000e94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001064:	4b87      	ldr	r3, [pc, #540]	; (8001284 <HAL_ADC_Init+0x290>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	099b      	lsrs	r3, r3, #6
 800106a:	4a87      	ldr	r2, [pc, #540]	; (8001288 <HAL_ADC_Init+0x294>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	099b      	lsrs	r3, r3, #6
 8001072:	3301      	adds	r3, #1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001078:	e002      	b.n	8001080 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3b01      	subs	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f9      	bne.n	800107a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff16 	bl	8000ebc <LL_ADC_IsInternalRegulatorEnabled>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10d      	bne.n	80010b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109a:	f043 0210 	orr.w	r2, r3, #16
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff76 	bl	8000fa8 <LL_ADC_REG_IsConversionOngoing>
 80010bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 80cf 	bne.w	800126a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f040 80cb 	bne.w	800126a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010dc:	f043 0202 	orr.w	r2, r3, #2
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff23 	bl	8000f34 <LL_ADC_IsEnabled>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d115      	bne.n	8001120 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010f4:	4865      	ldr	r0, [pc, #404]	; (800128c <HAL_ADC_Init+0x298>)
 80010f6:	f7ff ff1d 	bl	8000f34 <LL_ADC_IsEnabled>
 80010fa:	4604      	mov	r4, r0
 80010fc:	4864      	ldr	r0, [pc, #400]	; (8001290 <HAL_ADC_Init+0x29c>)
 80010fe:	f7ff ff19 	bl	8000f34 <LL_ADC_IsEnabled>
 8001102:	4603      	mov	r3, r0
 8001104:	431c      	orrs	r4, r3
 8001106:	4863      	ldr	r0, [pc, #396]	; (8001294 <HAL_ADC_Init+0x2a0>)
 8001108:	f7ff ff14 	bl	8000f34 <LL_ADC_IsEnabled>
 800110c:	4603      	mov	r3, r0
 800110e:	4323      	orrs	r3, r4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d105      	bne.n	8001120 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4619      	mov	r1, r3
 800111a:	485f      	ldr	r0, [pc, #380]	; (8001298 <HAL_ADC_Init+0x2a4>)
 800111c:	f7ff fd82 	bl	8000c24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7e5b      	ldrb	r3, [r3, #25]
 8001124:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800112a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001130:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001136:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800113e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d106      	bne.n	800115c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	3b01      	subs	r3, #1
 8001154:	045b      	lsls	r3, r3, #17
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	2b00      	cmp	r3, #0
 8001162:	d009      	beq.n	8001178 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_ADC_Init+0x2a8>)
 8001180:	4013      	ands	r3, r2
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	430b      	orrs	r3, r1
 800118a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff09 	bl	8000fa8 <LL_ADC_REG_IsConversionOngoing>
 8001196:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff16 	bl	8000fce <LL_ADC_INJ_IsConversionOngoing>
 80011a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d13d      	bne.n	8001226 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d13a      	bne.n	8001226 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011b4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011bc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011cc:	f023 0302 	bic.w	r3, r3, #2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	69b9      	ldr	r1, [r7, #24]
 80011d6:	430b      	orrs	r3, r1
 80011d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d118      	bne.n	8001216 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011ee:	f023 0304 	bic.w	r3, r3, #4
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011fa:	4311      	orrs	r1, r2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001200:	4311      	orrs	r1, r2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001206:	430a      	orrs	r2, r1
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	e007      	b.n	8001226 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10c      	bne.n	8001248 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f023 010f 	bic.w	r1, r3, #15
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
 8001246:	e007      	b.n	8001258 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 020f 	bic.w	r2, r2, #15
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	f023 0303 	bic.w	r3, r3, #3
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
 8001268:	e007      	b.n	800127a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126e:	f043 0210 	orr.w	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800127a:	7ffb      	ldrb	r3, [r7, #31]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3724      	adds	r7, #36	; 0x24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	053e2d63 	.word	0x053e2d63
 800128c:	50040000 	.word	0x50040000
 8001290:	50040100 	.word	0x50040100
 8001294:	50040200 	.word	0x50040200
 8001298:	50040300 	.word	0x50040300
 800129c:	fff0c007 	.word	0xfff0c007

080012a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012a8:	4857      	ldr	r0, [pc, #348]	; (8001408 <HAL_ADC_Start+0x168>)
 80012aa:	f7ff fdbf 	bl	8000e2c <LL_ADC_GetMultimode>
 80012ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe77 	bl	8000fa8 <LL_ADC_REG_IsConversionOngoing>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f040 809c 	bne.w	80013fa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_ADC_Start+0x30>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e097      	b.n	8001400 <HAL_ADC_Start+0x160>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fc99 	bl	8001c10 <ADC_Enable>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f040 8083 	bne.w	80013f0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a42      	ldr	r2, [pc, #264]	; (800140c <HAL_ADC_Start+0x16c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d002      	beq.n	800130e <HAL_ADC_Start+0x6e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	e000      	b.n	8001310 <HAL_ADC_Start+0x70>
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <HAL_ADC_Start+0x170>)
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	4293      	cmp	r3, r2
 8001316:	d002      	beq.n	800131e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001322:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001336:	d106      	bne.n	8001346 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133c:	f023 0206 	bic.w	r2, r3, #6
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	659a      	str	r2, [r3, #88]	; 0x58
 8001344:	e002      	b.n	800134c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	221c      	movs	r2, #28
 8001352:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2a      	ldr	r2, [pc, #168]	; (800140c <HAL_ADC_Start+0x16c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d002      	beq.n	800136c <HAL_ADC_Start+0xcc>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e000      	b.n	800136e <HAL_ADC_Start+0xce>
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_ADC_Start+0x170>)
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	4293      	cmp	r3, r2
 8001374:	d008      	beq.n	8001388 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b05      	cmp	r3, #5
 8001380:	d002      	beq.n	8001388 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b09      	cmp	r3, #9
 8001386:	d114      	bne.n	80013b2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800139e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fde8 	bl	8000f80 <LL_ADC_REG_StartConversion>
 80013b0:	e025      	b.n	80013fe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <HAL_ADC_Start+0x16c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d002      	beq.n	80013ce <HAL_ADC_Start+0x12e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_Start+0x130>
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_ADC_Start+0x170>)
 80013d0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00f      	beq.n	80013fe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54
 80013ee:	e006      	b.n	80013fe <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013f8:	e001      	b.n	80013fe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013fa:	2302      	movs	r3, #2
 80013fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	50040300 	.word	0x50040300
 800140c:	50040100 	.word	0x50040100
 8001410:	50040000 	.word	0x50040000

08001414 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0b6      	sub	sp, #216	; 0xd8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800144a:	2b01      	cmp	r3, #1
 800144c:	d101      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x22>
 800144e:	2302      	movs	r3, #2
 8001450:	e3c7      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x7b2>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fda2 	bl	8000fa8 <LL_ADC_REG_IsConversionOngoing>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	f040 83a8 	bne.w	8001bbc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b05      	cmp	r3, #5
 8001472:	d824      	bhi.n	80014be <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	3b02      	subs	r3, #2
 800147a:	2b03      	cmp	r3, #3
 800147c:	d81b      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0x86>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <HAL_ADC_ConfigChannel+0x54>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	08001495 	.word	0x08001495
 8001488:	0800149d 	.word	0x0800149d
 800148c:	080014a5 	.word	0x080014a5
 8001490:	080014ad 	.word	0x080014ad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	220c      	movs	r2, #12
 8001498:	605a      	str	r2, [r3, #4]
          break;
 800149a:	e011      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2212      	movs	r2, #18
 80014a0:	605a      	str	r2, [r3, #4]
          break;
 80014a2:	e00d      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2218      	movs	r2, #24
 80014a8:	605a      	str	r2, [r3, #4]
          break;
 80014aa:	e009      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b2:	605a      	str	r2, [r3, #4]
          break;
 80014b4:	e004      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2206      	movs	r2, #6
 80014ba:	605a      	str	r2, [r3, #4]
          break;
 80014bc:	e000      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80014be:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	f7ff fc32 	bl	8000d36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd66 	bl	8000fa8 <LL_ADC_REG_IsConversionOngoing>
 80014dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fd72 	bl	8000fce <LL_ADC_INJ_IsConversionOngoing>
 80014ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 81a6 	bne.w	8001844 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f040 81a1 	bne.w	8001844 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	461a      	mov	r2, r3
 8001510:	f7ff fc3d 	bl	8000d8e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	08db      	lsrs	r3, r3, #3
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b04      	cmp	r3, #4
 8001534:	d00a      	beq.n	800154c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	6919      	ldr	r1, [r3, #16]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001546:	f7ff fba1 	bl	8000c8c <LL_ADC_SetOffset>
 800154a:	e17b      	b.n	8001844 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fbbe 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10a      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x148>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fbb3 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	0e9b      	lsrs	r3, r3, #26
 8001572:	f003 021f 	and.w	r2, r3, #31
 8001576:	e01e      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x186>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fba8 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001596:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800159a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800159e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80015a6:	2320      	movs	r3, #32
 80015a8:	e004      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80015aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d105      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x19e>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	0e9b      	lsrs	r3, r3, #26
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	e018      	b.n	8001600 <HAL_ADC_ConfigChannel+0x1d0>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80015e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80015ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80015f2:	2320      	movs	r3, #32
 80015f4:	e004      	b.n	8001600 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80015f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001600:	429a      	cmp	r2, r3
 8001602:	d106      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fb77 	bl	8000d00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2101      	movs	r1, #1
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fb5b 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <HAL_ADC_ConfigChannel+0x20e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb50 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	0e9b      	lsrs	r3, r3, #26
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	e01e      	b.n	800167c <HAL_ADC_ConfigChannel+0x24c>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2101      	movs	r1, #1
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb45 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800165c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001664:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800166c:	2320      	movs	r3, #32
 800166e:	e004      	b.n	800167a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x264>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0e9b      	lsrs	r3, r3, #26
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	e018      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x296>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80016a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80016b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80016b8:	2320      	movs	r3, #32
 80016ba:	e004      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80016bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d106      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	2101      	movs	r1, #1
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fb14 	bl	8000d00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2102      	movs	r1, #2
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff faf8 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x2d4>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2102      	movs	r1, #2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff faed 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	0e9b      	lsrs	r3, r3, #26
 80016fe:	f003 021f 	and.w	r2, r3, #31
 8001702:	e01e      	b.n	8001742 <HAL_ADC_ConfigChannel+0x312>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2102      	movs	r1, #2
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fae2 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800172a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001732:	2320      	movs	r3, #32
 8001734:	e004      	b.n	8001740 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001736:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174a:	2b00      	cmp	r3, #0
 800174c:	d105      	bne.n	800175a <HAL_ADC_ConfigChannel+0x32a>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	0e9b      	lsrs	r3, r3, #26
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	e016      	b.n	8001788 <HAL_ADC_ConfigChannel+0x358>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800176c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800176e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001772:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800177a:	2320      	movs	r3, #32
 800177c:	e004      	b.n	8001788 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800177e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001788:	429a      	cmp	r2, r3
 800178a:	d106      	bne.n	800179a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	2102      	movs	r1, #2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fab3 	bl	8000d00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2103      	movs	r1, #3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fa97 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10a      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x396>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2103      	movs	r1, #3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fa8c 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	0e9b      	lsrs	r3, r3, #26
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	e017      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x3c6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2103      	movs	r1, #3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fa81 	bl	8000cd4 <LL_ADC_GetOffsetChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80017de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80017e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80017e8:	2320      	movs	r3, #32
 80017ea:	e003      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80017ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_ADC_ConfigChannel+0x3de>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0e9b      	lsrs	r3, r3, #26
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	e011      	b.n	8001832 <HAL_ADC_ConfigChannel+0x402>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800181c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800181e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001826:	2320      	movs	r3, #32
 8001828:	e003      	b.n	8001832 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800182a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001832:	429a      	cmp	r2, r3
 8001834:	d106      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	2103      	movs	r1, #3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fa5e 	bl	8000d00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fb73 	bl	8000f34 <LL_ADC_IsEnabled>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 813f 	bne.w	8001ad4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6819      	ldr	r1, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	461a      	mov	r2, r3
 8001864:	f7ff fabe 	bl	8000de4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4a8e      	ldr	r2, [pc, #568]	; (8001aa8 <HAL_ADC_ConfigChannel+0x678>)
 800186e:	4293      	cmp	r3, r2
 8001870:	f040 8130 	bne.w	8001ad4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <HAL_ADC_ConfigChannel+0x46c>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0e9b      	lsrs	r3, r3, #26
 800188a:	3301      	adds	r3, #1
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	2b09      	cmp	r3, #9
 8001892:	bf94      	ite	ls
 8001894:	2301      	movls	r3, #1
 8001896:	2300      	movhi	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e019      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x4a0>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80018aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80018ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80018b4:	2320      	movs	r3, #32
 80018b6:	e003      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80018b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	2b09      	cmp	r3, #9
 80018c8:	bf94      	ite	ls
 80018ca:	2301      	movls	r3, #1
 80018cc:	2300      	movhi	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d079      	beq.n	80019c8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d107      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x4c0>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0e9b      	lsrs	r3, r3, #26
 80018e6:	3301      	adds	r3, #1
 80018e8:	069b      	lsls	r3, r3, #26
 80018ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ee:	e015      	b.n	800191c <HAL_ADC_ConfigChannel+0x4ec>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001900:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001908:	2320      	movs	r3, #32
 800190a:	e003      	b.n	8001914 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	069b      	lsls	r3, r3, #26
 8001918:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_ADC_ConfigChannel+0x50c>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	3301      	adds	r3, #1
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	e017      	b.n	800196c <HAL_ADC_ConfigChannel+0x53c>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800194a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800194e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001954:	2320      	movs	r3, #32
 8001956:	e003      	b.n	8001960 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	3301      	adds	r3, #1
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	ea42 0103 	orr.w	r1, r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10a      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x562>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0e9b      	lsrs	r3, r3, #26
 8001982:	3301      	adds	r3, #1
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	051b      	lsls	r3, r3, #20
 8001990:	e018      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x594>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80019a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80019aa:	2320      	movs	r3, #32
 80019ac:	e003      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80019ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019c4:	430b      	orrs	r3, r1
 80019c6:	e080      	b.n	8001aca <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d107      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x5b4>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0e9b      	lsrs	r3, r3, #26
 80019da:	3301      	adds	r3, #1
 80019dc:	069b      	lsls	r3, r3, #26
 80019de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019e2:	e015      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x5e0>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80019f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80019fc:	2320      	movs	r3, #32
 80019fe:	e003      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	069b      	lsls	r3, r3, #26
 8001a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x600>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0e9b      	lsrs	r3, r3, #26
 8001a22:	3301      	adds	r3, #1
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	e017      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x630>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	61fb      	str	r3, [r7, #28]
  return result;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	e003      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3301      	adds	r3, #1
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	ea42 0103 	orr.w	r1, r2, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10d      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x65c>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0e9b      	lsrs	r3, r3, #26
 8001a76:	3301      	adds	r3, #1
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	3b1e      	subs	r3, #30
 8001a84:	051b      	lsls	r3, r3, #20
 8001a86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	e01d      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x698>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	613b      	str	r3, [r7, #16]
  return result;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d103      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e005      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x684>
 8001aa8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f003 021f 	and.w	r2, r3, #31
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b1e      	subs	r3, #30
 8001ac2:	051b      	lsls	r3, r3, #20
 8001ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	6892      	ldr	r2, [r2, #8]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7ff f95d 	bl	8000d8e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b44      	ldr	r3, [pc, #272]	; (8001bec <HAL_ADC_ConfigChannel+0x7bc>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d07a      	beq.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ae0:	4843      	ldr	r0, [pc, #268]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ae2:	f7ff f8c5 	bl	8000c70 <LL_ADC_GetCommonPathInternalCh>
 8001ae6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a41      	ldr	r2, [pc, #260]	; (8001bf4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d12c      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d126      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a3c      	ldr	r2, [pc, #240]	; (8001bf8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_ADC_ConfigChannel+0x6e4>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a3b      	ldr	r2, [pc, #236]	; (8001bfc <HAL_ADC_ConfigChannel+0x7cc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d15d      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4834      	ldr	r0, [pc, #208]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b20:	f7ff f893 	bl	8000c4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	4a36      	ldr	r2, [pc, #216]	; (8001c04 <HAL_ADC_ConfigChannel+0x7d4>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b3e:	e002      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f9      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b4c:	e040      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d118      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x75a>
 8001b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d112      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d004      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0x748>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_ADC_ConfigChannel+0x7cc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d12d      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b80:	4619      	mov	r1, r3
 8001b82:	481b      	ldr	r0, [pc, #108]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b84:	f7ff f861 	bl	8000c4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b88:	e024      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <HAL_ADC_ConfigChannel+0x7dc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d120      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11a      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d115      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bb6:	f7ff f848 	bl	8000c4a <LL_ADC_SetCommonPathInternalCh>
 8001bba:	e00c      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001bce:	e002      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bd0:	bf00      	nop
 8001bd2:	e000      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bde:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	37d8      	adds	r7, #216	; 0xd8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	80080000 	.word	0x80080000
 8001bf0:	50040300 	.word	0x50040300
 8001bf4:	c7520000 	.word	0xc7520000
 8001bf8:	50040000 	.word	0x50040000
 8001bfc:	50040200 	.word	0x50040200
 8001c00:	20000000 	.word	0x20000000
 8001c04:	053e2d63 	.word	0x053e2d63
 8001c08:	cb840000 	.word	0xcb840000
 8001c0c:	80000001 	.word	0x80000001

08001c10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f987 	bl	8000f34 <LL_ADC_IsEnabled>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d169      	bne.n	8001d00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <ADC_Enable+0xfc>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00d      	beq.n	8001c56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f043 0210 	orr.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e055      	b.n	8001d02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f942 	bl	8000ee4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c60:	482b      	ldr	r0, [pc, #172]	; (8001d10 <ADC_Enable+0x100>)
 8001c62:	f7ff f805 	bl	8000c70 <LL_ADC_GetCommonPathInternalCh>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <ADC_Enable+0x104>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <ADC_Enable+0x108>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001c8a:	e002      	b.n	8001c92 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f9      	bne.n	8001c8c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c98:	f7fe ffb8 	bl	8000c0c <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c9e:	e028      	b.n	8001cf2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f945 	bl	8000f34 <LL_ADC_IsEnabled>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d104      	bne.n	8001cba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f915 	bl	8000ee4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cba:	f7fe ffa7 	bl	8000c0c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d914      	bls.n	8001cf2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d00d      	beq.n	8001cf2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e007      	b.n	8001d02 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d1cf      	bne.n	8001ca0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	8000003f 	.word	0x8000003f
 8001d10:	50040300 	.word	0x50040300
 8001d14:	20000000 	.word	0x20000000
 8001d18:	053e2d63 	.word	0x053e2d63

08001d1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f916 	bl	8000f5a <LL_ADC_IsDisableOngoing>
 8001d2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f8fd 	bl	8000f34 <LL_ADC_IsEnabled>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d047      	beq.n	8001dd0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d144      	bne.n	8001dd0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030d 	and.w	r3, r3, #13
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d10c      	bne.n	8001d6e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f8d7 	bl	8000f0c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2203      	movs	r2, #3
 8001d64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d66:	f7fe ff51 	bl	8000c0c <HAL_GetTick>
 8001d6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d6c:	e029      	b.n	8001dc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e023      	b.n	8001dd2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d8a:	f7fe ff3f 	bl	8000c0c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d914      	bls.n	8001dc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00d      	beq.n	8001dc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e007      	b.n	8001dd2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1dc      	bne.n	8001d8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <LL_ADC_IsEnabled>:
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <LL_ADC_IsEnabled+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_ADC_IsEnabled+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_StartCalibration>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001e12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	609a      	str	r2, [r3, #8]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_ADC_IsCalibrationOnGoing>:
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e46:	d101      	bne.n	8001e4c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_ADC_REG_IsConversionOngoing>:
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d101      	bne.n	8001e72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_ADCEx_Calibration_Start+0x1c>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e04d      	b.n	8001f38 <HAL_ADCEx_Calibration_Start+0xb8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff39 	bl	8001d1c <ADC_Disable>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d136      	bne.n	8001f22 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ebc:	f023 0302 	bic.w	r3, r3, #2
 8001ec0:	f043 0202 	orr.w	r2, r3, #2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6839      	ldr	r1, [r7, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff96 	bl	8001e00 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001ed4:	e014      	b.n	8001f00 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8001ee2:	d30d      	bcc.n	8001f00 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	f023 0312 	bic.w	r3, r3, #18
 8001eec:	f043 0210 	orr.w	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e01b      	b.n	8001f38 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff94 	bl	8001e32 <LL_ADC_IsCalibrationOnGoing>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e2      	bne.n	8001ed6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	f023 0303 	bic.w	r3, r3, #3
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
 8001f20:	e005      	b.n	8001f2e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b09f      	sub	sp, #124	; 0x7c
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e093      	b.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001f66:	2300      	movs	r3, #0
 8001f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d102      	bne.n	8001f7e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f78:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	e001      	b.n	8001f82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10b      	bne.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f043 0220 	orr.w	r2, r3, #32
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e072      	b.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff59 	bl	8001e5a <LL_ADC_REG_IsConversionOngoing>
 8001fa8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff53 	bl	8001e5a <LL_ADC_REG_IsConversionOngoing>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d154      	bne.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d151      	bne.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fc0:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001fc2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d02c      	beq.n	8002026 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fde:	035b      	lsls	r3, r3, #13
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fe8:	4829      	ldr	r0, [pc, #164]	; (8002090 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fea:	f7ff fef6 	bl	8001dda <LL_ADC_IsEnabled>
 8001fee:	4604      	mov	r4, r0
 8001ff0:	4828      	ldr	r0, [pc, #160]	; (8002094 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ff2:	f7ff fef2 	bl	8001dda <LL_ADC_IsEnabled>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	431c      	orrs	r4, r3
 8001ffa:	4828      	ldr	r0, [pc, #160]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ffc:	f7ff feed 	bl	8001dda <LL_ADC_IsEnabled>
 8002000:	4603      	mov	r3, r0
 8002002:	4323      	orrs	r3, r4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d137      	bne.n	8002078 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002010:	f023 030f 	bic.w	r3, r3, #15
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	6811      	ldr	r1, [r2, #0]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	6892      	ldr	r2, [r2, #8]
 800201c:	430a      	orrs	r2, r1
 800201e:	431a      	orrs	r2, r3
 8002020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002022:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002024:	e028      	b.n	8002078 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002030:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002032:	4817      	ldr	r0, [pc, #92]	; (8002090 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002034:	f7ff fed1 	bl	8001dda <LL_ADC_IsEnabled>
 8002038:	4604      	mov	r4, r0
 800203a:	4816      	ldr	r0, [pc, #88]	; (8002094 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800203c:	f7ff fecd 	bl	8001dda <LL_ADC_IsEnabled>
 8002040:	4603      	mov	r3, r0
 8002042:	431c      	orrs	r4, r3
 8002044:	4815      	ldr	r0, [pc, #84]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002046:	f7ff fec8 	bl	8001dda <LL_ADC_IsEnabled>
 800204a:	4603      	mov	r3, r0
 800204c:	4323      	orrs	r3, r4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d112      	bne.n	8002078 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800205a:	f023 030f 	bic.w	r3, r3, #15
 800205e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002060:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002062:	e009      	b.n	8002078 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002076:	e000      	b.n	800207a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002078:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002082:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002086:	4618      	mov	r0, r3
 8002088:	377c      	adds	r7, #124	; 0x7c
 800208a:	46bd      	mov	sp, r7
 800208c:	bd90      	pop	{r4, r7, pc}
 800208e:	bf00      	nop
 8002090:	50040000 	.word	0x50040000
 8002094:	50040100 	.word	0x50040100
 8002098:	50040300 	.word	0x50040300
 800209c:	50040200 	.word	0x50040200

080020a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	; (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	; (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff47 	bl	80020a0 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff5c 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff8e 	bl	8002158 <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5d 	bl	8002104 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffb0 	bl	80021c0 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227a:	e17f      	b.n	800257c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8171 	beq.w	8002576 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d005      	beq.n	80022ac <HAL_GPIO_Init+0x40>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d130      	bne.n	800230e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e2:	2201      	movs	r2, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 0201 	and.w	r2, r3, #1
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b03      	cmp	r3, #3
 8002318:	d118      	bne.n	800234c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002320:	2201      	movs	r2, #1
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	f003 0201 	and.w	r2, r3, #1
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b03      	cmp	r3, #3
 8002356:	d017      	beq.n	8002388 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	6939      	ldr	r1, [r7, #16]
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80ac 	beq.w	8002576 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	4b5f      	ldr	r3, [pc, #380]	; (800259c <HAL_GPIO_Init+0x330>)
 8002420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002422:	4a5e      	ldr	r2, [pc, #376]	; (800259c <HAL_GPIO_Init+0x330>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6613      	str	r3, [r2, #96]	; 0x60
 800242a:	4b5c      	ldr	r3, [pc, #368]	; (800259c <HAL_GPIO_Init+0x330>)
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002436:	4a5a      	ldr	r2, [pc, #360]	; (80025a0 <HAL_GPIO_Init+0x334>)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002460:	d025      	beq.n	80024ae <HAL_GPIO_Init+0x242>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4f      	ldr	r2, [pc, #316]	; (80025a4 <HAL_GPIO_Init+0x338>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01f      	beq.n	80024aa <HAL_GPIO_Init+0x23e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4e      	ldr	r2, [pc, #312]	; (80025a8 <HAL_GPIO_Init+0x33c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d019      	beq.n	80024a6 <HAL_GPIO_Init+0x23a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4d      	ldr	r2, [pc, #308]	; (80025ac <HAL_GPIO_Init+0x340>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x236>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <HAL_GPIO_Init+0x344>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00d      	beq.n	800249e <HAL_GPIO_Init+0x232>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <HAL_GPIO_Init+0x348>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <HAL_GPIO_Init+0x22e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4a      	ldr	r2, [pc, #296]	; (80025b8 <HAL_GPIO_Init+0x34c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_GPIO_Init+0x22a>
 8002492:	2306      	movs	r3, #6
 8002494:	e00c      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 8002496:	2307      	movs	r3, #7
 8002498:	e00a      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 800249a:	2305      	movs	r3, #5
 800249c:	e008      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 800249e:	2304      	movs	r3, #4
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 80024a2:	2303      	movs	r3, #3
 80024a4:	e004      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_GPIO_Init+0x244>
 80024ae:	2300      	movs	r3, #0
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	f002 0203 	and.w	r2, r2, #3
 80024b6:	0092      	lsls	r2, r2, #2
 80024b8:	4093      	lsls	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c0:	4937      	ldr	r1, [pc, #220]	; (80025a0 <HAL_GPIO_Init+0x334>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_GPIO_Init+0x350>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f2:	4a32      	ldr	r2, [pc, #200]	; (80025bc <HAL_GPIO_Init+0x350>)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_GPIO_Init+0x350>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43db      	mvns	r3, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800251c:	4a27      	ldr	r2, [pc, #156]	; (80025bc <HAL_GPIO_Init+0x350>)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_GPIO_Init+0x350>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_GPIO_Init+0x350>)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_GPIO_Init+0x350>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002570:	4a12      	ldr	r2, [pc, #72]	; (80025bc <HAL_GPIO_Init+0x350>)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3301      	adds	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	f47f ae78 	bne.w	800227c <HAL_GPIO_Init+0x10>
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	48000400 	.word	0x48000400
 80025a8:	48000800 	.word	0x48000800
 80025ac:	48000c00 	.word	0x48000c00
 80025b0:	48001000 	.word	0x48001000
 80025b4:	48001400 	.word	0x48001400
 80025b8:	48001800 	.word	0x48001800
 80025bc:	40010400 	.word	0x40010400

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <HAL_PWREx_GetVoltageRange+0x18>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40007000 	.word	0x40007000

0800260c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261a:	d130      	bne.n	800267e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800261c:	4b23      	ldr	r3, [pc, #140]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002628:	d038      	beq.n	800269c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002632:	4a1e      	ldr	r2, [pc, #120]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2232      	movs	r2, #50	; 0x32
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0c9b      	lsrs	r3, r3, #18
 800264c:	3301      	adds	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002650:	e002      	b.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3b01      	subs	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002664:	d102      	bne.n	800266c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f2      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002678:	d110      	bne.n	800269c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e00f      	b.n	800269e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d007      	beq.n	800269c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002694:	4a05      	ldr	r2, [pc, #20]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40007000 	.word	0x40007000
 80026b0:	20000000 	.word	0x20000000
 80026b4:	431bde83 	.word	0x431bde83

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e3ca      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ca:	4b97      	ldr	r3, [pc, #604]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d4:	4b94      	ldr	r3, [pc, #592]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80e4 	beq.w	80028b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_RCC_OscConfig+0x4a>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	f040 808b 	bne.w	8002810 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 8087 	bne.w	8002810 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002702:	4b89      	ldr	r3, [pc, #548]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x62>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e3a2      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1a      	ldr	r2, [r3, #32]
 800271e:	4b82      	ldr	r3, [pc, #520]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <HAL_RCC_OscConfig+0x7c>
 800272a:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002732:	e005      	b.n	8002740 <HAL_RCC_OscConfig+0x88>
 8002734:	4b7c      	ldr	r3, [pc, #496]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002740:	4293      	cmp	r3, r2
 8002742:	d223      	bcs.n	800278c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fd55 	bl	80031f8 <RCC_SetFlashLatencyFromMSIRange>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e383      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002758:	4b73      	ldr	r3, [pc, #460]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a72      	ldr	r2, [pc, #456]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	4b70      	ldr	r3, [pc, #448]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	496d      	ldr	r1, [pc, #436]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002776:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	4968      	ldr	r1, [pc, #416]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
 800278a:	e025      	b.n	80027d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002792:	f043 0308 	orr.w	r3, r3, #8
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b63      	ldr	r3, [pc, #396]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4960      	ldr	r1, [pc, #384]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027aa:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	495b      	ldr	r1, [pc, #364]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fd15 	bl	80031f8 <RCC_SetFlashLatencyFromMSIRange>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e343      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027d8:	f000 fc4a 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b52      	ldr	r3, [pc, #328]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	4950      	ldr	r1, [pc, #320]	; (800292c <HAL_RCC_OscConfig+0x274>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
 80027f4:	4a4e      	ldr	r2, [pc, #312]	; (8002930 <HAL_RCC_OscConfig+0x278>)
 80027f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027f8:	4b4e      	ldr	r3, [pc, #312]	; (8002934 <HAL_RCC_OscConfig+0x27c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe f9b5 	bl	8000b6c <HAL_InitTick>
 8002802:	4603      	mov	r3, r0
 8002804:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d052      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	e327      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d032      	beq.n	800287e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002818:	4b43      	ldr	r3, [pc, #268]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a42      	ldr	r2, [pc, #264]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002824:	f7fe f9f2 	bl	8000c0c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800282c:	f7fe f9ee 	bl	8000c0c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e310      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800284a:	4b37      	ldr	r3, [pc, #220]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a36      	ldr	r2, [pc, #216]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002850:	f043 0308 	orr.w	r3, r3, #8
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4931      	ldr	r1, [pc, #196]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002868:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	492c      	ldr	r1, [pc, #176]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
 800287c:	e01a      	b.n	80028b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800287e:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a29      	ldr	r2, [pc, #164]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800288a:	f7fe f9bf 	bl	8000c0c <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002892:	f7fe f9bb 	bl	8000c0c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e2dd      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f0      	bne.n	8002892 <HAL_RCC_OscConfig+0x1da>
 80028b0:	e000      	b.n	80028b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d074      	beq.n	80029aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d005      	beq.n	80028d2 <HAL_RCC_OscConfig+0x21a>
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d10e      	bne.n	80028ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d10b      	bne.n	80028ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d064      	beq.n	80029a8 <HAL_RCC_OscConfig+0x2f0>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d160      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e2ba      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x24a>
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	e026      	b.n	8002950 <HAL_RCC_OscConfig+0x298>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800290a:	d115      	bne.n	8002938 <HAL_RCC_OscConfig+0x280>
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a05      	ldr	r2, [pc, #20]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a02      	ldr	r2, [pc, #8]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	e014      	b.n	8002950 <HAL_RCC_OscConfig+0x298>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	0800460c 	.word	0x0800460c
 8002930:	20000000 	.word	0x20000000
 8002934:	20000004 	.word	0x20000004
 8002938:	4ba0      	ldr	r3, [pc, #640]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a9f      	ldr	r2, [pc, #636]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 800293e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b9d      	ldr	r3, [pc, #628]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a9c      	ldr	r2, [pc, #624]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 800294a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe f958 	bl	8000c0c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7fe f954 	bl	8000c0c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e276      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002972:	4b92      	ldr	r3, [pc, #584]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x2a8>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe f944 	bl	8000c0c <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe f940 	bl	8000c0c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e262      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800299a:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x2d0>
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d060      	beq.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_OscConfig+0x310>
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d119      	bne.n	80029f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d116      	bne.n	80029f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c8:	4b7c      	ldr	r3, [pc, #496]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x328>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e23f      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b76      	ldr	r3, [pc, #472]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	4973      	ldr	r1, [pc, #460]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f4:	e040      	b.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d023      	beq.n	8002a46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fe:	4b6f      	ldr	r3, [pc, #444]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6e      	ldr	r2, [pc, #440]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe f8ff 	bl	8000c0c <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe f8fb 	bl	8000c0c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e21d      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a24:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	495f      	ldr	r1, [pc, #380]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
 8002a44:	e018      	b.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b5d      	ldr	r3, [pc, #372]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a5c      	ldr	r2, [pc, #368]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe f8db 	bl	8000c0c <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7fe f8d7 	bl	8000c0c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1f9      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a6c:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d03c      	beq.n	8002afe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8c:	4b4b      	ldr	r3, [pc, #300]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a92:	4a4a      	ldr	r2, [pc, #296]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe f8b6 	bl	8000c0c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7fe f8b2 	bl	8000c0c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1d4      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ab6:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ef      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x3ec>
 8002ac4:	e01b      	b.n	8002afe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002acc:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7fe f899 	bl	8000c0c <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ade:	f7fe f895 	bl	8000c0c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e1b7      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ef      	bne.n	8002ade <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80a6 	beq.w	8002c58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10d      	bne.n	8002b38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b26:	6593      	str	r3, [r2, #88]	; 0x58
 8002b28:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b34:	2301      	movs	r3, #1
 8002b36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x508>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d118      	bne.n	8002b76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_RCC_OscConfig+0x508>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <HAL_RCC_OscConfig+0x508>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b50:	f7fe f85c 	bl	8000c0c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b58:	f7fe f858 	bl	8000c0c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e17a      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_RCC_OscConfig+0x508>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4d8>
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b8e:	e029      	b.n	8002be4 <HAL_RCC_OscConfig+0x52c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d115      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x50c>
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	4a03      	ldr	r2, [pc, #12]	; (8002bbc <HAL_RCC_OscConfig+0x504>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb8:	e014      	b.n	8002be4 <HAL_RCC_OscConfig+0x52c>
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	4b9c      	ldr	r3, [pc, #624]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	4a9b      	ldr	r2, [pc, #620]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bd4:	4b98      	ldr	r3, [pc, #608]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	4a97      	ldr	r2, [pc, #604]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d016      	beq.n	8002c1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fe f80e 	bl	8000c0c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7fe f80a 	bl	8000c0c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e12a      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0a:	4b8b      	ldr	r3, [pc, #556]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ed      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x53c>
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7fd fff7 	bl	8000c0c <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fd fff3 	bl	8000c0c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e113      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c38:	4b7f      	ldr	r3, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ed      	bne.n	8002c22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c46:	7ffb      	ldrb	r3, [r7, #31]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4b7a      	ldr	r3, [pc, #488]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	4a79      	ldr	r2, [pc, #484]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80fe 	beq.w	8002e5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	f040 80d0 	bne.w	8002e0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c6c:	4b72      	ldr	r3, [pc, #456]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0203 	and.w	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d130      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d127      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d11f      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cac:	2a07      	cmp	r2, #7
 8002cae:	bf14      	ite	ne
 8002cb0:	2201      	movne	r2, #1
 8002cb2:	2200      	moveq	r2, #0
 8002cb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d113      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d06e      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d069      	beq.n	8002dbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0ad      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d04:	4b4c      	ldr	r3, [pc, #304]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a4b      	ldr	r2, [pc, #300]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d10:	f7fd ff7c 	bl	8000c0c <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fd ff78 	bl	8000c0c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e09a      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2a:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d36:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <HAL_RCC_OscConfig+0x784>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d46:	3a01      	subs	r2, #1
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d50:	0212      	lsls	r2, r2, #8
 8002d52:	4311      	orrs	r1, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d58:	0852      	lsrs	r2, r2, #1
 8002d5a:	3a01      	subs	r2, #1
 8002d5c:	0552      	lsls	r2, r2, #21
 8002d5e:	4311      	orrs	r1, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d64:	0852      	lsrs	r2, r2, #1
 8002d66:	3a01      	subs	r2, #1
 8002d68:	0652      	lsls	r2, r2, #25
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d70:	0912      	lsrs	r2, r2, #4
 8002d72:	0452      	lsls	r2, r2, #17
 8002d74:	430a      	orrs	r2, r1
 8002d76:	4930      	ldr	r1, [pc, #192]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d88:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d94:	f7fd ff3a 	bl	8000c0c <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fd ff36 	bl	8000c0c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e058      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dae:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dba:	e050      	b.n	8002e5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e04f      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d148      	bne.n	8002e5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a16      	ldr	r2, [pc, #88]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002de4:	f7fd ff12 	bl	8000c0c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fd ff0e 	bl	8000c0c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e030      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x734>
 8002e0a:	e028      	b.n	8002e5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d023      	beq.n	8002e5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <HAL_RCC_OscConfig+0x780>)
 8002e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fd fef5 	bl	8000c0c <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e24:	e00c      	b.n	8002e40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e26:	f7fd fef1 	bl	8000c0c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d905      	bls.n	8002e40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e013      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_OscConfig+0x7b0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1ec      	bne.n	8002e26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_OscConfig+0x7b0>)
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	4905      	ldr	r1, [pc, #20]	; (8002e68 <HAL_RCC_OscConfig+0x7b0>)
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_OscConfig+0x7b4>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
 8002e58:	e001      	b.n	8002e5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	feeefffc 	.word	0xfeeefffc

08002e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0e7      	b.n	8003054 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e84:	4b75      	ldr	r3, [pc, #468]	; (800305c <HAL_RCC_ClockConfig+0x1ec>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d910      	bls.n	8002eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b72      	ldr	r3, [pc, #456]	; (800305c <HAL_RCC_ClockConfig+0x1ec>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 0207 	bic.w	r2, r3, #7
 8002e9a:	4970      	ldr	r1, [pc, #448]	; (800305c <HAL_RCC_ClockConfig+0x1ec>)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b6e      	ldr	r3, [pc, #440]	; (800305c <HAL_RCC_ClockConfig+0x1ec>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0cf      	b.n	8003054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b66      	ldr	r3, [pc, #408]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d908      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b63      	ldr	r3, [pc, #396]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4960      	ldr	r1, [pc, #384]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d04c      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	4b5a      	ldr	r3, [pc, #360]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d121      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0a6      	b.n	8003054 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0e:	4b54      	ldr	r3, [pc, #336]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d115      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e09a      	b.n	8003054 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f26:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e08e      	b.n	8003054 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f36:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e086      	b.n	8003054 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b46      	ldr	r3, [pc, #280]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4943      	ldr	r1, [pc, #268]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f58:	f7fd fe58 	bl	8000c0c <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f60:	f7fd fe54 	bl	8000c0c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e06e      	b.n	8003054 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b3a      	ldr	r3, [pc, #232]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 020c 	and.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1eb      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d010      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d208      	bcs.n	8002fb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	492b      	ldr	r1, [pc, #172]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb6:	4b29      	ldr	r3, [pc, #164]	; (800305c <HAL_RCC_ClockConfig+0x1ec>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d210      	bcs.n	8002fe6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <HAL_RCC_ClockConfig+0x1ec>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 0207 	bic.w	r2, r3, #7
 8002fcc:	4923      	ldr	r1, [pc, #140]	; (800305c <HAL_RCC_ClockConfig+0x1ec>)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd4:	4b21      	ldr	r3, [pc, #132]	; (800305c <HAL_RCC_ClockConfig+0x1ec>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e036      	b.n	8003054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4918      	ldr	r1, [pc, #96]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4910      	ldr	r1, [pc, #64]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003024:	f000 f824 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	490b      	ldr	r1, [pc, #44]	; (8003064 <HAL_RCC_ClockConfig+0x1f4>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
 8003040:	4a09      	ldr	r2, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1f8>)
 8003042:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_ClockConfig+0x1fc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fd8f 	bl	8000b6c <HAL_InitTick>
 800304e:	4603      	mov	r3, r0
 8003050:	72fb      	strb	r3, [r7, #11]

  return status;
 8003052:	7afb      	ldrb	r3, [r7, #11]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40022000 	.word	0x40022000
 8003060:	40021000 	.word	0x40021000
 8003064:	0800460c 	.word	0x0800460c
 8003068:	20000000 	.word	0x20000000
 800306c:	20000004 	.word	0x20000004

08003070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_RCC_GetSysClockFreq+0x108>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_RCC_GetSysClockFreq+0x108>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b0c      	cmp	r3, #12
 800309c:	d121      	bne.n	80030e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d11e      	bne.n	80030e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030a4:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030b0:	4b31      	ldr	r3, [pc, #196]	; (8003178 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	e005      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030c0:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030cc:	4a2b      	ldr	r2, [pc, #172]	; (800317c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10d      	bne.n	80030f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d102      	bne.n	80030ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	e004      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030f4:	4b23      	ldr	r3, [pc, #140]	; (8003184 <HAL_RCC_GetSysClockFreq+0x114>)
 80030f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d134      	bne.n	8003168 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <HAL_RCC_GetSysClockFreq+0x108>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d003      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0xa6>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d003      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xac>
 8003114:	e005      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_RCC_GetSysClockFreq+0x110>)
 8003118:	617b      	str	r3, [r7, #20]
      break;
 800311a:	e005      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_GetSysClockFreq+0x114>)
 800311e:	617b      	str	r3, [r7, #20]
      break;
 8003120:	e002      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	617b      	str	r3, [r7, #20]
      break;
 8003126:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <HAL_RCC_GetSysClockFreq+0x108>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	3301      	adds	r3, #1
 8003134:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCC_GetSysClockFreq+0x108>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	fb03 f202 	mul.w	r2, r3, r2
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_GetSysClockFreq+0x108>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	0e5b      	lsrs	r3, r3, #25
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	3301      	adds	r3, #1
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003168:	69bb      	ldr	r3, [r7, #24]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	08004624 	.word	0x08004624
 8003180:	00f42400 	.word	0x00f42400
 8003184:	007a1200 	.word	0x007a1200

08003188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_RCC_GetHCLKFreq+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000000 	.word	0x20000000

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031a4:	f7ff fff0 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4904      	ldr	r1, [pc, #16]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	0800461c 	.word	0x0800461c

080031cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031d0:	f7ff ffda 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0adb      	lsrs	r3, r3, #11
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4904      	ldr	r1, [pc, #16]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	0800461c 	.word	0x0800461c

080031f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003204:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003210:	f7ff f9ee 	bl	80025f0 <HAL_PWREx_GetVoltageRange>
 8003214:	6178      	str	r0, [r7, #20]
 8003216:	e014      	b.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6593      	str	r3, [r2, #88]	; 0x58
 8003224:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003230:	f7ff f9de 	bl	80025f0 <HAL_PWREx_GetVoltageRange>
 8003234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003240:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003248:	d10b      	bne.n	8003262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b80      	cmp	r3, #128	; 0x80
 800324e:	d919      	bls.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2ba0      	cmp	r3, #160	; 0xa0
 8003254:	d902      	bls.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003256:	2302      	movs	r3, #2
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e013      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800325c:	2301      	movs	r3, #1
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	e010      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d902      	bls.n	800326e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003268:	2303      	movs	r3, #3
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	e00a      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d102      	bne.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003274:	2302      	movs	r3, #2
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e004      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b70      	cmp	r3, #112	; 0x70
 800327e:	d101      	bne.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003280:	2301      	movs	r3, #1
 8003282:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 0207 	bic.w	r2, r3, #7
 800328c:	4909      	ldr	r1, [pc, #36]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d001      	beq.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40022000 	.word	0x40022000

080032b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032c0:	2300      	movs	r3, #0
 80032c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032c4:	2300      	movs	r3, #0
 80032c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d041      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032dc:	d02a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032e2:	d824      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e8:	d008      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ee:	d81e      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f8:	d010      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032fa:	e018      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032fc:	4b86      	ldr	r3, [pc, #536]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a85      	ldr	r2, [pc, #532]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003306:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003308:	e015      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3304      	adds	r3, #4
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fabb 	bl	800388c <RCCEx_PLLSAI1_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800331a:	e00c      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3320      	adds	r3, #32
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fba6 	bl	8003a74 <RCCEx_PLLSAI2_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800332c:	e003      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	74fb      	strb	r3, [r7, #19]
      break;
 8003332:	e000      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003336:	7cfb      	ldrb	r3, [r7, #19]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10b      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800333c:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334a:	4973      	ldr	r1, [pc, #460]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003352:	e001      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d041      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003368:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800336c:	d02a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800336e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003372:	d824      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003378:	d008      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800337a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800337e:	d81e      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003388:	d010      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800338a:	e018      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800338c:	4b62      	ldr	r3, [pc, #392]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a61      	ldr	r2, [pc, #388]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003396:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003398:	e015      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fa73 	bl	800388c <RCCEx_PLLSAI1_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033aa:	e00c      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3320      	adds	r3, #32
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fb5e 	bl	8003a74 <RCCEx_PLLSAI2_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033bc:	e003      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	74fb      	strb	r3, [r7, #19]
      break;
 80033c2:	e000      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10b      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033cc:	4b52      	ldr	r3, [pc, #328]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033da:	494f      	ldr	r1, [pc, #316]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033e2:	e001      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80a0 	beq.w	8003536 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f6:	2300      	movs	r3, #0
 80033f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800340a:	2300      	movs	r3, #0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00d      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003410:	4b41      	ldr	r3, [pc, #260]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	4a40      	ldr	r2, [pc, #256]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341a:	6593      	str	r3, [r2, #88]	; 0x58
 800341c:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003428:	2301      	movs	r3, #1
 800342a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800342c:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a3a      	ldr	r2, [pc, #232]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003438:	f7fd fbe8 	bl	8000c0c <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800343e:	e009      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003440:	f7fd fbe4 	bl	8000c0c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d902      	bls.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	74fb      	strb	r3, [r7, #19]
        break;
 8003452:	e005      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003454:	4b31      	ldr	r3, [pc, #196]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ef      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d15c      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003466:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003470:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01f      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	429a      	cmp	r2, r3
 8003482:	d019      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	4a20      	ldr	r2, [pc, #128]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fd fba3 	bl	8000c0c <HAL_GetTick>
 80034c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c8:	e00b      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fd fb9f 	bl	8000c0c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d902      	bls.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	74fb      	strb	r3, [r7, #19]
            break;
 80034e0:	e006      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ec      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f6:	4b08      	ldr	r3, [pc, #32]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003506:	4904      	ldr	r1, [pc, #16]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800350e:	e009      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
 8003514:	e006      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003524:	7c7b      	ldrb	r3, [r7, #17]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d105      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352a:	4b9e      	ldr	r3, [pc, #632]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	4a9d      	ldr	r2, [pc, #628]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003542:	4b98      	ldr	r3, [pc, #608]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f023 0203 	bic.w	r2, r3, #3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	4994      	ldr	r1, [pc, #592]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003564:	4b8f      	ldr	r3, [pc, #572]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f023 020c 	bic.w	r2, r3, #12
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	498c      	ldr	r1, [pc, #560]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003586:	4b87      	ldr	r3, [pc, #540]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	4983      	ldr	r1, [pc, #524]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035a8:	4b7e      	ldr	r3, [pc, #504]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	497b      	ldr	r1, [pc, #492]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ca:	4b76      	ldr	r3, [pc, #472]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d8:	4972      	ldr	r1, [pc, #456]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035ec:	4b6d      	ldr	r3, [pc, #436]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	496a      	ldr	r1, [pc, #424]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	4961      	ldr	r1, [pc, #388]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003630:	4b5c      	ldr	r3, [pc, #368]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363e:	4959      	ldr	r1, [pc, #356]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003652:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	4950      	ldr	r1, [pc, #320]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	4948      	ldr	r1, [pc, #288]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003696:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	493f      	ldr	r1, [pc, #252]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d028      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036b8:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c6:	4937      	ldr	r1, [pc, #220]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d6:	d106      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d8:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a31      	ldr	r2, [pc, #196]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e2:	60d3      	str	r3, [r2, #12]
 80036e4:	e011      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ee:	d10c      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	2101      	movs	r1, #1
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f8c8 	bl	800388c <RCCEx_PLLSAI1_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d028      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003716:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	491f      	ldr	r1, [pc, #124]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003734:	d106      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	4a1a      	ldr	r2, [pc, #104]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003740:	60d3      	str	r3, [r2, #12]
 8003742:	e011      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374c:	d10c      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f899 	bl	800388c <RCCEx_PLLSAI1_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d02b      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003782:	4908      	ldr	r1, [pc, #32]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003792:	d109      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a02      	ldr	r2, [pc, #8]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379e:	60d3      	str	r3, [r2, #12]
 80037a0:	e014      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f867 	bl	800388c <RCCEx_PLLSAI1_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d02f      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037d8:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037e6:	4928      	ldr	r1, [pc, #160]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f6:	d10d      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f844 	bl	800388c <RCCEx_PLLSAI1_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d014      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800380e:	7cfb      	ldrb	r3, [r7, #19]
 8003810:	74bb      	strb	r3, [r7, #18]
 8003812:	e011      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800381c:	d10c      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3320      	adds	r3, #32
 8003822:	2102      	movs	r1, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 f925 	bl	8003a74 <RCCEx_PLLSAI2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003844:	4b10      	ldr	r3, [pc, #64]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003852:	490d      	ldr	r1, [pc, #52]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003876:	4904      	ldr	r1, [pc, #16]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800387e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000

0800388c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800389a:	4b75      	ldr	r3, [pc, #468]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038a6:	4b72      	ldr	r3, [pc, #456]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0203 	and.w	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d10d      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
       ||
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038be:	4b6c      	ldr	r3, [pc, #432]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
       ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d047      	beq.n	8003962 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	e044      	b.n	8003962 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d018      	beq.n	8003912 <RCCEx_PLLSAI1_Config+0x86>
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d825      	bhi.n	8003930 <RCCEx_PLLSAI1_Config+0xa4>
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d002      	beq.n	80038ee <RCCEx_PLLSAI1_Config+0x62>
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d009      	beq.n	8003900 <RCCEx_PLLSAI1_Config+0x74>
 80038ec:	e020      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ee:	4b60      	ldr	r3, [pc, #384]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11d      	bne.n	8003936 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fe:	e01a      	b.n	8003936 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003900:	4b5b      	ldr	r3, [pc, #364]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d116      	bne.n	800393a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003910:	e013      	b.n	800393a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003912:	4b57      	ldr	r3, [pc, #348]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800391e:	4b54      	ldr	r3, [pc, #336]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800392e:	e006      	b.n	800393e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      break;
 8003934:	e004      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800393e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10d      	bne.n	8003962 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003946:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	430b      	orrs	r3, r1
 800395c:	4944      	ldr	r1, [pc, #272]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d17d      	bne.n	8003a64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003968:	4b41      	ldr	r3, [pc, #260]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a40      	ldr	r2, [pc, #256]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003974:	f7fd f94a 	bl	8000c0c <HAL_GetTick>
 8003978:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800397a:	e009      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800397c:	f7fd f946 	bl	8000c0c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	73fb      	strb	r3, [r7, #15]
        break;
 800398e:	e005      	b.n	800399c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003990:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ef      	bne.n	800397c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d160      	bne.n	8003a64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d111      	bne.n	80039cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a8:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6892      	ldr	r2, [r2, #8]
 80039b8:	0211      	lsls	r1, r2, #8
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68d2      	ldr	r2, [r2, #12]
 80039be:	0912      	lsrs	r2, r2, #4
 80039c0:	0452      	lsls	r2, r2, #17
 80039c2:	430a      	orrs	r2, r1
 80039c4:	492a      	ldr	r1, [pc, #168]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	610b      	str	r3, [r1, #16]
 80039ca:	e027      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d112      	bne.n	80039f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039d2:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6892      	ldr	r2, [r2, #8]
 80039e2:	0211      	lsls	r1, r2, #8
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6912      	ldr	r2, [r2, #16]
 80039e8:	0852      	lsrs	r2, r2, #1
 80039ea:	3a01      	subs	r2, #1
 80039ec:	0552      	lsls	r2, r2, #21
 80039ee:	430a      	orrs	r2, r1
 80039f0:	491f      	ldr	r1, [pc, #124]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	610b      	str	r3, [r1, #16]
 80039f6:	e011      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6892      	ldr	r2, [r2, #8]
 8003a08:	0211      	lsls	r1, r2, #8
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6952      	ldr	r2, [r2, #20]
 8003a0e:	0852      	lsrs	r2, r2, #1
 8003a10:	3a01      	subs	r2, #1
 8003a12:	0652      	lsls	r2, r2, #25
 8003a14:	430a      	orrs	r2, r1
 8003a16:	4916      	ldr	r1, [pc, #88]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a1c:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a13      	ldr	r2, [pc, #76]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fd f8f0 	bl	8000c0c <HAL_GetTick>
 8003a2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a2e:	e009      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a30:	f7fd f8ec 	bl	8000c0c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d902      	bls.n	8003a44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	73fb      	strb	r3, [r7, #15]
          break;
 8003a42:	e005      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0ef      	beq.n	8003a30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	4904      	ldr	r1, [pc, #16]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000

08003a74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a82:	4b6a      	ldr	r3, [pc, #424]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d018      	beq.n	8003ac0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a8e:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0203 	and.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d10d      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
       ||
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003aa6:	4b61      	ldr	r3, [pc, #388]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d047      	beq.n	8003b4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	e044      	b.n	8003b4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d018      	beq.n	8003afa <RCCEx_PLLSAI2_Config+0x86>
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d825      	bhi.n	8003b18 <RCCEx_PLLSAI2_Config+0xa4>
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d002      	beq.n	8003ad6 <RCCEx_PLLSAI2_Config+0x62>
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d009      	beq.n	8003ae8 <RCCEx_PLLSAI2_Config+0x74>
 8003ad4:	e020      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ad6:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d11d      	bne.n	8003b1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae6:	e01a      	b.n	8003b1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ae8:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d116      	bne.n	8003b22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af8:	e013      	b.n	8003b22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003afa:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10f      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b06:	4b49      	ldr	r3, [pc, #292]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b16:	e006      	b.n	8003b26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1c:	e004      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	430b      	orrs	r3, r1
 8003b44:	4939      	ldr	r1, [pc, #228]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d167      	bne.n	8003c20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b50:	4b36      	ldr	r3, [pc, #216]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a35      	ldr	r2, [pc, #212]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5c:	f7fd f856 	bl	8000c0c <HAL_GetTick>
 8003b60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b62:	e009      	b.n	8003b78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b64:	f7fd f852 	bl	8000c0c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d902      	bls.n	8003b78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	73fb      	strb	r3, [r7, #15]
        break;
 8003b76:	e005      	b.n	8003b84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ef      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d14a      	bne.n	8003c20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d111      	bne.n	8003bb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b90:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6892      	ldr	r2, [r2, #8]
 8003ba0:	0211      	lsls	r1, r2, #8
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68d2      	ldr	r2, [r2, #12]
 8003ba6:	0912      	lsrs	r2, r2, #4
 8003ba8:	0452      	lsls	r2, r2, #17
 8003baa:	430a      	orrs	r2, r1
 8003bac:	491f      	ldr	r1, [pc, #124]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	614b      	str	r3, [r1, #20]
 8003bb2:	e011      	b.n	8003bd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bb4:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6892      	ldr	r2, [r2, #8]
 8003bc4:	0211      	lsls	r1, r2, #8
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6912      	ldr	r2, [r2, #16]
 8003bca:	0852      	lsrs	r2, r2, #1
 8003bcc:	3a01      	subs	r2, #1
 8003bce:	0652      	lsls	r2, r2, #25
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	4916      	ldr	r1, [pc, #88]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fd f812 	bl	8000c0c <HAL_GetTick>
 8003be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bea:	e009      	b.n	8003c00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bec:	f7fd f80e 	bl	8000c0c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d902      	bls.n	8003c00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8003bfe:	e005      	b.n	8003c0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ef      	beq.n	8003bec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4904      	ldr	r1, [pc, #16]	; (8003c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000

08003c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e040      	b.n	8003cc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fc fea8 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	; 0x24
 8003c5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f82c 	bl	8003ccc <UART_SetConfig>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e022      	b.n	8003cc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fad8 	bl	800423c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fb5f 	bl	8004380 <UART_CheckIdleState>
 8003cc2:	4603      	mov	r3, r0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd0:	b08a      	sub	sp, #40	; 0x28
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4ba4      	ldr	r3, [pc, #656]	; (8003f8c <UART_SetConfig+0x2c0>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a99      	ldr	r2, [pc, #612]	; (8003f90 <UART_SetConfig+0x2c4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d004      	beq.n	8003d38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d34:	4313      	orrs	r3, r2
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a90      	ldr	r2, [pc, #576]	; (8003f94 <UART_SetConfig+0x2c8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d126      	bne.n	8003da4 <UART_SetConfig+0xd8>
 8003d56:	4b90      	ldr	r3, [pc, #576]	; (8003f98 <UART_SetConfig+0x2cc>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d81b      	bhi.n	8003d9c <UART_SetConfig+0xd0>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0xa0>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d8d 	.word	0x08003d8d
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d95 	.word	0x08003d95
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e116      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003d84:	2302      	movs	r3, #2
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e112      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e10e      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003d94:	2308      	movs	r3, #8
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9a:	e10a      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da2:	e106      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a7c      	ldr	r2, [pc, #496]	; (8003f9c <UART_SetConfig+0x2d0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d138      	bne.n	8003e20 <UART_SetConfig+0x154>
 8003dae:	4b7a      	ldr	r3, [pc, #488]	; (8003f98 <UART_SetConfig+0x2cc>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d82d      	bhi.n	8003e18 <UART_SetConfig+0x14c>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <UART_SetConfig+0xf8>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003df9 	.word	0x08003df9
 8003dc8:	08003e19 	.word	0x08003e19
 8003dcc:	08003e19 	.word	0x08003e19
 8003dd0:	08003e19 	.word	0x08003e19
 8003dd4:	08003e09 	.word	0x08003e09
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e19 	.word	0x08003e19
 8003de0:	08003e19 	.word	0x08003e19
 8003de4:	08003e01 	.word	0x08003e01
 8003de8:	08003e19 	.word	0x08003e19
 8003dec:	08003e19 	.word	0x08003e19
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	08003e11 	.word	0x08003e11
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfe:	e0d8      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003e00:	2302      	movs	r3, #2
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e06:	e0d4      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0e:	e0d0      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003e10:	2308      	movs	r3, #8
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e16:	e0cc      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1e:	e0c8      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a5e      	ldr	r2, [pc, #376]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d125      	bne.n	8003e76 <UART_SetConfig+0x1aa>
 8003e2a:	4b5b      	ldr	r3, [pc, #364]	; (8003f98 <UART_SetConfig+0x2cc>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e34:	2b30      	cmp	r3, #48	; 0x30
 8003e36:	d016      	beq.n	8003e66 <UART_SetConfig+0x19a>
 8003e38:	2b30      	cmp	r3, #48	; 0x30
 8003e3a:	d818      	bhi.n	8003e6e <UART_SetConfig+0x1a2>
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d00a      	beq.n	8003e56 <UART_SetConfig+0x18a>
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d814      	bhi.n	8003e6e <UART_SetConfig+0x1a2>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <UART_SetConfig+0x182>
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d008      	beq.n	8003e5e <UART_SetConfig+0x192>
 8003e4c:	e00f      	b.n	8003e6e <UART_SetConfig+0x1a2>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e54:	e0ad      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003e56:	2302      	movs	r3, #2
 8003e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5c:	e0a9      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003e5e:	2304      	movs	r3, #4
 8003e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e64:	e0a5      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003e66:	2308      	movs	r3, #8
 8003e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6c:	e0a1      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003e6e:	2310      	movs	r3, #16
 8003e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e74:	e09d      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a4a      	ldr	r2, [pc, #296]	; (8003fa4 <UART_SetConfig+0x2d8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d125      	bne.n	8003ecc <UART_SetConfig+0x200>
 8003e80:	4b45      	ldr	r3, [pc, #276]	; (8003f98 <UART_SetConfig+0x2cc>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e8c:	d016      	beq.n	8003ebc <UART_SetConfig+0x1f0>
 8003e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e90:	d818      	bhi.n	8003ec4 <UART_SetConfig+0x1f8>
 8003e92:	2b80      	cmp	r3, #128	; 0x80
 8003e94:	d00a      	beq.n	8003eac <UART_SetConfig+0x1e0>
 8003e96:	2b80      	cmp	r3, #128	; 0x80
 8003e98:	d814      	bhi.n	8003ec4 <UART_SetConfig+0x1f8>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <UART_SetConfig+0x1d8>
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d008      	beq.n	8003eb4 <UART_SetConfig+0x1e8>
 8003ea2:	e00f      	b.n	8003ec4 <UART_SetConfig+0x1f8>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eaa:	e082      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003eac:	2302      	movs	r3, #2
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb2:	e07e      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eba:	e07a      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec2:	e076      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eca:	e072      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a35      	ldr	r2, [pc, #212]	; (8003fa8 <UART_SetConfig+0x2dc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d12a      	bne.n	8003f2c <UART_SetConfig+0x260>
 8003ed6:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <UART_SetConfig+0x2cc>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee4:	d01a      	beq.n	8003f1c <UART_SetConfig+0x250>
 8003ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eea:	d81b      	bhi.n	8003f24 <UART_SetConfig+0x258>
 8003eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef0:	d00c      	beq.n	8003f0c <UART_SetConfig+0x240>
 8003ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef6:	d815      	bhi.n	8003f24 <UART_SetConfig+0x258>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <UART_SetConfig+0x238>
 8003efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f00:	d008      	beq.n	8003f14 <UART_SetConfig+0x248>
 8003f02:	e00f      	b.n	8003f24 <UART_SetConfig+0x258>
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0a:	e052      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f12:	e04e      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003f14:	2304      	movs	r3, #4
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1a:	e04a      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003f1c:	2308      	movs	r3, #8
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f22:	e046      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003f24:	2310      	movs	r3, #16
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e042      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <UART_SetConfig+0x2c4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d13a      	bne.n	8003fac <UART_SetConfig+0x2e0>
 8003f36:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <UART_SetConfig+0x2cc>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f44:	d01a      	beq.n	8003f7c <UART_SetConfig+0x2b0>
 8003f46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f4a:	d81b      	bhi.n	8003f84 <UART_SetConfig+0x2b8>
 8003f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f50:	d00c      	beq.n	8003f6c <UART_SetConfig+0x2a0>
 8003f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f56:	d815      	bhi.n	8003f84 <UART_SetConfig+0x2b8>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <UART_SetConfig+0x298>
 8003f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f60:	d008      	beq.n	8003f74 <UART_SetConfig+0x2a8>
 8003f62:	e00f      	b.n	8003f84 <UART_SetConfig+0x2b8>
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6a:	e022      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f72:	e01e      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003f74:	2304      	movs	r3, #4
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e01a      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e016      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003f84:	2310      	movs	r3, #16
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8a:	e012      	b.n	8003fb2 <UART_SetConfig+0x2e6>
 8003f8c:	efff69f3 	.word	0xefff69f3
 8003f90:	40008000 	.word	0x40008000
 8003f94:	40013800 	.word	0x40013800
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40004400 	.word	0x40004400
 8003fa0:	40004800 	.word	0x40004800
 8003fa4:	40004c00 	.word	0x40004c00
 8003fa8:	40005000 	.word	0x40005000
 8003fac:	2310      	movs	r3, #16
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a9f      	ldr	r2, [pc, #636]	; (8004234 <UART_SetConfig+0x568>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d17a      	bne.n	80040b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d824      	bhi.n	800400e <UART_SetConfig+0x342>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x300>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	0800400f 	.word	0x0800400f
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	0800400f 	.word	0x0800400f
 8003fdc:	08003fff 	.word	0x08003fff
 8003fe0:	0800400f 	.word	0x0800400f
 8003fe4:	0800400f 	.word	0x0800400f
 8003fe8:	0800400f 	.word	0x0800400f
 8003fec:	08004007 	.word	0x08004007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f7ff f8d6 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	61f8      	str	r0, [r7, #28]
        break;
 8003ff6:	e010      	b.n	800401a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff8:	4b8f      	ldr	r3, [pc, #572]	; (8004238 <UART_SetConfig+0x56c>)
 8003ffa:	61fb      	str	r3, [r7, #28]
        break;
 8003ffc:	e00d      	b.n	800401a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffe:	f7ff f837 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8004002:	61f8      	str	r0, [r7, #28]
        break;
 8004004:	e009      	b.n	800401a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800400a:	61fb      	str	r3, [r7, #28]
        break;
 800400c:	e005      	b.n	800401a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004018:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80fb 	beq.w	8004218 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	429a      	cmp	r2, r3
 8004030:	d305      	bcc.n	800403e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	429a      	cmp	r2, r3
 800403c:	d903      	bls.n	8004046 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004044:	e0e8      	b.n	8004218 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2200      	movs	r2, #0
 800404a:	461c      	mov	r4, r3
 800404c:	4615      	mov	r5, r2
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	022b      	lsls	r3, r5, #8
 8004058:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800405c:	0222      	lsls	r2, r4, #8
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	6849      	ldr	r1, [r1, #4]
 8004062:	0849      	lsrs	r1, r1, #1
 8004064:	2000      	movs	r0, #0
 8004066:	4688      	mov	r8, r1
 8004068:	4681      	mov	r9, r0
 800406a:	eb12 0a08 	adds.w	sl, r2, r8
 800406e:	eb43 0b09 	adc.w	fp, r3, r9
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004080:	4650      	mov	r0, sl
 8004082:	4659      	mov	r1, fp
 8004084:	f7fc f8a0 	bl	80001c8 <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4613      	mov	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004096:	d308      	bcc.n	80040aa <UART_SetConfig+0x3de>
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409e:	d204      	bcs.n	80040aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	60da      	str	r2, [r3, #12]
 80040a8:	e0b6      	b.n	8004218 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040b0:	e0b2      	b.n	8004218 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ba:	d15e      	bne.n	800417a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80040bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d828      	bhi.n	8004116 <UART_SetConfig+0x44a>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <UART_SetConfig+0x400>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004117 	.word	0x08004117
 80040dc:	08004107 	.word	0x08004107
 80040e0:	08004117 	.word	0x08004117
 80040e4:	08004117 	.word	0x08004117
 80040e8:	08004117 	.word	0x08004117
 80040ec:	0800410f 	.word	0x0800410f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f0:	f7ff f856 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80040f4:	61f8      	str	r0, [r7, #28]
        break;
 80040f6:	e014      	b.n	8004122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7ff f868 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 80040fc:	61f8      	str	r0, [r7, #28]
        break;
 80040fe:	e010      	b.n	8004122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004100:	4b4d      	ldr	r3, [pc, #308]	; (8004238 <UART_SetConfig+0x56c>)
 8004102:	61fb      	str	r3, [r7, #28]
        break;
 8004104:	e00d      	b.n	8004122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004106:	f7fe ffb3 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800410a:	61f8      	str	r0, [r7, #28]
        break;
 800410c:	e009      	b.n	8004122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004112:	61fb      	str	r3, [r7, #28]
        break;
 8004114:	e005      	b.n	8004122 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004120:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d077      	beq.n	8004218 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005a      	lsls	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	085b      	lsrs	r3, r3, #1
 8004132:	441a      	add	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d916      	bls.n	8004172 <UART_SetConfig+0x4a6>
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414a:	d212      	bcs.n	8004172 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	b29b      	uxth	r3, r3
 8004150:	f023 030f 	bic.w	r3, r3, #15
 8004154:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	b29b      	uxth	r3, r3
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	b29a      	uxth	r2, r3
 8004162:	8afb      	ldrh	r3, [r7, #22]
 8004164:	4313      	orrs	r3, r2
 8004166:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	8afa      	ldrh	r2, [r7, #22]
 800416e:	60da      	str	r2, [r3, #12]
 8004170:	e052      	b.n	8004218 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004178:	e04e      	b.n	8004218 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800417a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800417e:	2b08      	cmp	r3, #8
 8004180:	d827      	bhi.n	80041d2 <UART_SetConfig+0x506>
 8004182:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <UART_SetConfig+0x4bc>)
 8004184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004188:	080041ad 	.word	0x080041ad
 800418c:	080041b5 	.word	0x080041b5
 8004190:	080041bd 	.word	0x080041bd
 8004194:	080041d3 	.word	0x080041d3
 8004198:	080041c3 	.word	0x080041c3
 800419c:	080041d3 	.word	0x080041d3
 80041a0:	080041d3 	.word	0x080041d3
 80041a4:	080041d3 	.word	0x080041d3
 80041a8:	080041cb 	.word	0x080041cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ac:	f7fe fff8 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80041b0:	61f8      	str	r0, [r7, #28]
        break;
 80041b2:	e014      	b.n	80041de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041b4:	f7ff f80a 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 80041b8:	61f8      	str	r0, [r7, #28]
        break;
 80041ba:	e010      	b.n	80041de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041bc:	4b1e      	ldr	r3, [pc, #120]	; (8004238 <UART_SetConfig+0x56c>)
 80041be:	61fb      	str	r3, [r7, #28]
        break;
 80041c0:	e00d      	b.n	80041de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c2:	f7fe ff55 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 80041c6:	61f8      	str	r0, [r7, #28]
        break;
 80041c8:	e009      	b.n	80041de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ce:	61fb      	str	r3, [r7, #28]
        break;
 80041d0:	e005      	b.n	80041de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041dc:	bf00      	nop
    }

    if (pclk != 0U)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d019      	beq.n	8004218 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	085a      	lsrs	r2, r3, #1
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	441a      	add	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b0f      	cmp	r3, #15
 80041fc:	d909      	bls.n	8004212 <UART_SetConfig+0x546>
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d205      	bcs.n	8004212 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60da      	str	r2, [r3, #12]
 8004210:	e002      	b.n	8004218 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004224:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004228:	4618      	mov	r0, r3
 800422a:	3728      	adds	r7, #40	; 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004232:	bf00      	nop
 8004234:	40008000 	.word	0x40008000
 8004238:	00f42400 	.word	0x00f42400

0800423c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01a      	beq.n	8004352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433a:	d10a      	bne.n	8004352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	605a      	str	r2, [r3, #4]
  }
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af02      	add	r7, sp, #8
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004390:	f7fc fc3c 	bl	8000c0c <HAL_GetTick>
 8004394:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d10e      	bne.n	80043c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f82d 	bl	8004412 <UART_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e023      	b.n	800440a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d10e      	bne.n	80043ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f817 	bl	8004412 <UART_WaitOnFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e00d      	b.n	800440a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2220      	movs	r2, #32
 80043f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b09c      	sub	sp, #112	; 0x70
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	603b      	str	r3, [r7, #0]
 800441e:	4613      	mov	r3, r2
 8004420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004422:	e0a5      	b.n	8004570 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442a:	f000 80a1 	beq.w	8004570 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fc fbed 	bl	8000c0c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <UART_WaitOnFlagUntilTimeout+0x32>
 800443e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004440:	2b00      	cmp	r3, #0
 8004442:	d13e      	bne.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004454:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004458:	667b      	str	r3, [r7, #100]	; 0x64
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004462:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004464:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004468:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e6      	bne.n	8004444 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3308      	adds	r3, #8
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	663b      	str	r3, [r7, #96]	; 0x60
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3308      	adds	r3, #8
 8004494:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004496:	64ba      	str	r2, [r7, #72]	; 0x48
 8004498:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800449c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e5      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e067      	b.n	8004592 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d04f      	beq.n	8004570 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044de:	d147      	bne.n	8004570 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
 800450a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800450e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e6      	bne.n	80044ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3308      	adds	r3, #8
 8004522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	613b      	str	r3, [r7, #16]
   return(result);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	66bb      	str	r3, [r7, #104]	; 0x68
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800453c:	623a      	str	r2, [r7, #32]
 800453e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	69f9      	ldr	r1, [r7, #28]
 8004542:	6a3a      	ldr	r2, [r7, #32]
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	61bb      	str	r3, [r7, #24]
   return(result);
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e5      	bne.n	800451c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e010      	b.n	8004592 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4013      	ands	r3, r2
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	429a      	cmp	r2, r3
 800458c:	f43f af4a 	beq.w	8004424 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3770      	adds	r7, #112	; 0x70
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4d0d      	ldr	r5, [pc, #52]	; (80045d4 <__libc_init_array+0x38>)
 80045a0:	4c0d      	ldr	r4, [pc, #52]	; (80045d8 <__libc_init_array+0x3c>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	2600      	movs	r6, #0
 80045a8:	42a6      	cmp	r6, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	4d0b      	ldr	r5, [pc, #44]	; (80045dc <__libc_init_array+0x40>)
 80045ae:	4c0c      	ldr	r4, [pc, #48]	; (80045e0 <__libc_init_array+0x44>)
 80045b0:	f000 f820 	bl	80045f4 <_init>
 80045b4:	1b64      	subs	r4, r4, r5
 80045b6:	10a4      	asrs	r4, r4, #2
 80045b8:	2600      	movs	r6, #0
 80045ba:	42a6      	cmp	r6, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c4:	4798      	blx	r3
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ce:	4798      	blx	r3
 80045d0:	3601      	adds	r6, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	0800465c 	.word	0x0800465c
 80045d8:	0800465c 	.word	0x0800465c
 80045dc:	0800465c 	.word	0x0800465c
 80045e0:	08004660 	.word	0x08004660

080045e4 <memset>:
 80045e4:	4402      	add	r2, r0
 80045e6:	4603      	mov	r3, r0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d100      	bne.n	80045ee <memset+0xa>
 80045ec:	4770      	bx	lr
 80045ee:	f803 1b01 	strb.w	r1, [r3], #1
 80045f2:	e7f9      	b.n	80045e8 <memset+0x4>

080045f4 <_init>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	bf00      	nop
 80045f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fa:	bc08      	pop	{r3}
 80045fc:	469e      	mov	lr, r3
 80045fe:	4770      	bx	lr

08004600 <_fini>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr
